name: Check versions and build-publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "main"

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install --upgrade hatch

      - name: Check which ðŸ“¦ needs to be released
        run: |
          packages=("vizro-core") #  "vizro-core"

          for package in "${packages[@]}"; do
              cd $package
              version=$(hatch version)
              cd ..
              python tools/github_actions_release.py $package $version
          done

      - name: Set outputs
        id: version_check
        run: |
          echo "new_release=${{ env.NEW_RELEASE }}" >> $GITHUB_OUTPUT
          echo "package_name=${{ env.PACKAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "package_version=${{ env.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
    outputs:
      new_release: ${{ steps.version_check.outputs.new_release }}
      package_name: ${{ steps.version_check.outputs.package_name }}
      package_version: ${{ steps.version_check.outputs.package_version }}

#   build-publish:
#     needs: [check-version]
#     if: |
#       needs.check-version.outputs.new_release == 'true'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python
#         uses: actions/setup-python@v3
#         with:
#           python-version: "3.10"
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install hatch
#       - name: Extract release notes from ${{needs.check-version.outputs.package_name}}/CHANGELOG.md
#         id: extract
#         run: |
#           formatted_date=$(date +"%Y-%m-%d")
#           python tools/extract_release_notes.py \
#           "${{needs.check-version.outputs.package_name}}/CHANGELOG.md" \
#           "${{needs.check-version.outputs.package_version}} â€” $formatted_date"
#       - name: Tag main and create release on github
#         run: |
#           ./tools/release.sh mckinsey vizro ${{ secrets.GITHUB_TOKEN }} ${{needs.check-version.outputs.package_name}} ${{needs.check-version.outputs.package_version}} release_body.txt
#       - name: Build package
#         run: |
#           cd "${{ needs.check-version.outputs.package_name }}"
#           hatch build
#       - name: Set PyPI token
#         run: |
#           if [ "${{ needs.check-version.outputs.PACKAGE_NAME }}" == "vizro-core" ]; then
#               echo 'PYPI_TOKEN=${{ secrets.VIZRO_TEST_PYPI_TOKEN }}' >> $GITHUB_ENV
#           fi
#       - name: Publish distribution ðŸ“¦ to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           packages-dir: ${{ needs.check-version.outputs.package_name }}/dist
#           password: ${{ env.PYPI_TOKEN }}
#           repository-url: https://test.pypi.org/legacy/

  version-bump:
    needs: [check-version]
    if: |
      needs.check-version.outputs.new_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Bump version to next patch
        run: |
          cd "${{ needs.check-version.outputs.package_name }}"
          git checkout -b "release/version_bump_next_minor"
          hatch version patch,dev
          hatch run docs:changelog
          git config user.email "83698606+maxschulz-COL@users.noreply.github.com"
          git config user.name "Vizro Team"
          git commit -am "version bump"
          git push --set-upstream origin release/version_bump_next_minor
          ./../tools/version-bump.sh mckinsey vizro ${{ secrets.GITHUB_TOKEN }} ${{needs.check-version.outputs.package_name}} ${{needs.check-version.outputs.package_version}} release/version_bump_next_minor
