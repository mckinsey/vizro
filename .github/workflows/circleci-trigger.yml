name: CircleCI tests trigger

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  circleci-trigger:
    name: CircleCI tests trigger
    environment: circleci_secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ping CircleCI pipeline
        run: |
          CREATED_PIPELINE=$(curl --request POST \
            --url "${{ secrets.QA_PIPELINE_URL }}" \
            --header "Circle-Token: ${{ secrets.CIRCLECI_API_KEY }}" \
            --header "content-type: application/json" \
            --data '{"branch":"${{ github.head_ref }}", "parameters":{"branch":"${{ github.head_ref }}", "vizro_branch": "${{ github.head_ref }}", "tag": ""}}' \
          | jq -r '.id'
          )
          if [[ "$CREATED_PIPELINE" == "null" ]]; then
            CREATED_PIPELINE=$(curl --request POST \
            --url "${{ secrets.QA_PIPELINE_URL }}" \
            --header "Circle-Token: ${{ secrets.CIRCLECI_API_KEY }}" \
            --header "content-type: application/json" \
            --data '{"branch":"main", "parameters":{"branch":"main", "vizro_branch": "${{ github.head_ref }}", "tag": ""}}' \
            | jq -r '.id'
            )
          fi
          echo "my created pipeline"
          echo $CREATED_PIPELINE
    
          created_workflow_status=$(curl --request GET \
              --url "https://circleci.com/api/v2/pipeline/$CREATED_PIPELINE/workflow" \
              --header "Circle-Token: ${{ secrets.CIRCLECI_API_KEY }}" \
              --header "content-type: application/json" \
            | jq -r '.items[0].status'
          )
    
          echo $created_workflow_status
    
          if [[ "$created_workflow_status" == "running" ]]; then
            created_workflow_status_updated=$(curl --request GET \
                  --url "https://circleci.com/api/v2/pipeline/$CREATED_PIPELINE/workflow" \
                  --header "Circle-Token: $CIRCLECI_API_KEY" \
                  --header "content-type: application/json" \
                | jq -r '.items[0].status'
              )
            while [[ "$created_workflow_status_updated" == "running" ]]
            do
              sleep 15
              created_workflow_status_updated=$(curl --request GET \
                  --url "https://circleci.com/api/v2/pipeline/$CREATED_PIPELINE/workflow" \
                  --header "Circle-Token: $CIRCLECI_API_KEY" \
                  --header "content-type: application/json" \
                | jq -r '.items[0].status'
              )
              echo $created_workflow_status_updated
            done
    
            if [[ "$created_workflow_status_updated" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status_updated}"
              (exit -1)
            fi
    
            echo "Created workflow successful"
    
          elif [[ "$created_workflow_status" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status}"
              (exit -1)
    
          elif [[ "$created_workflow_status" == "success" ]]; then
              echo "Created workflow successful"
          fi
