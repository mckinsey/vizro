name: CircleCI tests trigger

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  circleci-trigger-fork:
    if: github.event.pull_request.head.repo.fork == true
    name: Passed fork job
    runs-on: ubuntu-latest
    steps:
      - name: Passed fork step
        run: echo "Success!"

  circleci-trigger:
    if: github.event.pull_request.head.repo.fork == false
    name: CircleCI tests trigger
    environment: circleci_secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ping CircleCI pipeline
        run: |
          # github_tag is needed for tests after release
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            github_tag=${{ github.ref_name }}
          else github_tag=""
          fi

          create_circleci_pipeline() {
            local branch=$1
            local vizro_branch=$2
            local tag=$3

            local json_data=$(jq -n --arg branch "$branch" --arg vizro_branch "$vizro_branch" --arg tag "$tag" '{branch: $branch, parameters: {branch: $branch, vizro_branch: $vizro_branch, tag: $tag}}')

            curl --request POST \
              --url "${{ secrets.QA_PIPELINE_URL }}" \
              --header "Circle-Token: ${{ secrets.CIRCLECI_API_KEY }}" \
              --header "content-type: application/json" \
              --data "$json_data" \
            | jq -r '.id'
          }


          CREATED_PIPELINE=$(create_circleci_pipeline "${{ github.head_ref }}" "${{ github.head_ref }}" "$github_tag")

          # we use this loop to trigger main branch in tests if tests repo doesn't contain current dev branch
          if [[ "$CREATED_PIPELINE" == "null" ]]; then
            CREATED_PIPELINE=$(create_circleci_pipeline "main" "${{ github.head_ref }}" "$github_tag")
          fi
          echo "my created pipeline"
          echo $CREATED_PIPELINE

          sleep 60

          get_workflow_status() {
            curl --silent --request GET \
                 --url "https://circleci.com/api/v2/pipeline/$CREATED_PIPELINE/workflow" \
                 --header "Circle-Token: ${{ secrets.CIRCLECI_API_KEY }}" \
                 --header "content-type: application/json" \
              | jq -r '.items[0].status'
          }

          while created_workflow_status=$(get_workflow_status); [[ "$created_workflow_status" == "running" ]]; do
            echo $created_workflow_status
            sleep 15
          done

          if [[ "$created_workflow_status" != "success" ]]; then
              echo "Workflow not successful - ${created_workflow_status}"
              (exit -1)

          elif [[ "$created_workflow_status" == "success" ]]; then
              echo "Created workflow successful"
          fi
